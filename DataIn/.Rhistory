shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
View(NLC)
min(NLC$Date[which(NLC$ProductHouse == "Investo"),])
NLC$Date[which(NLC$ProductHouse == "Investo"),]
NLC$Date
NLC[which(NLC$ProductHouse = "Investo"),]
NLC[which(NLC$ProductHouse = toupper("Investo")),]
toupper("Investo")
which(NLC$ProductHouse = toupper("Investo"))
NLC[which(NLC$ProductHouse == toupper("Investo")),]
which(NLC$ProductHouse == toupper("Investo"))
NLC$ProductHouse
NLC[which(NLC$ProductHouse == "Investo"),]
NLC$Date[which(NLC$ProductHouse == "Investo"),]
NLC$[which(NLC$ProductHouse == "Investo"),"Date"]
NLC
NLC[which(NLC$ProductHouse == "Investo"),"Date"]
min(NLC[which(NLC$ProductHouse == "Investo"),"Date"])
min(as.Date(NLC[which(NLC$ProductHouse == "Investo"),"Date"]))
?dateRangeInput
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
PHG("Investo")
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
s <- "2010-02-28"
e <- "2014-09-30"
PH <- "Investo"
PHG(PH)
NLC[which(NLC$ProductHouse == PH),]
NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
NLC$Date <- as.Date(NLC$Date)
NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
s
e
Pol
PH <- "Investo"
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
NLC$Date <- as.Date(NLC$Date, format = "%Y-%m-%d")
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
PHG(PH, s, e)
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
fs <- system.time()
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
fe <- system.time()
fe - fs
fs <- system.time()
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
fe <- system.time()
system.time()
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
system.time()
system.time()
install.packages("rbenchmark ")
install.packages("rbenchmark")
install.packages("rbenchmark")
?rbenchmark
require(rbenchmark)
?rbenchmark
rbenchmark(
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
)
benchmark(
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
)
Pol <- NLC[which(NLC$ProductHouse == PH & NLC$Date > s & NLC$Date < e),]
tsLC <- ts(data = Pol$LC,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsNB <- ts(data = Pol$NB,
start = c(as.integer(format(min(Pol$Date), "%Y")), as.integer(format(min(Pol$Date), "%m"))),
end = c(as.integer(format(max(Pol$Date), "%Y")), as.integer(format(max(Pol$Date), "%m"))),
frequency = 12)
tsLCfc <- forecast(auto.arima(tsLC) ,12)
tsNBfc <- forecast(auto.arima(tsNB) ,12)
LC <- funggcast(tsLC,tsLCfc)
NB <- funggcast(tsNB,tsNBfc)
#observed LC
p1 <- ggplot(data = LC, aes(x = date, y = observed), type = "line", col = "#dc291e", lwd = 1, alpha = .125) +
geom_line(data = LC, col = "#dc291e", alpha = .5)+
geom_smooth(data = LC, aes(x=date, y =observed), method = "loess",  col = "#dc291e", fill = "#dc291e", lwd=1.25, alpha = .375)
#forecast LC
p1 <- p1 + geom_ribbon(data = LC, aes(x = date, ymin = lo80, ymax= hi80), fill = "#dc291e", alpha = .125)+
geom_ribbon(data = LC, aes(x = date, ymin = lo95, ymax= hi95), fill = "#dc291e", alpha = .125)+
geom_line(data = LC, aes(x= date, y = forecast), lty = "dotted", col = "#dc291e", lwd = 1)
#observed NB
p1 <- p1 + geom_line(data = NB, aes(x = date, y = observed), col = "#003366", alpha = .33) +
geom_smooth(data = NB, aes(x=date, y =observed), method = "loess",  col = "#003366", fill = "#003366", lwd=1.25, alpha = .375)
#forecast NB
p1 <- p1 + geom_ribbon(data = NB, aes(x = date, ymin = lo80, ymax= hi80), fill = "#003366", alpha = .125)+
geom_ribbon(data = NB, aes(x = date, ymin = lo95, ymax= hi95), fill = "#003366", alpha = .125)+
geom_line(data = NB, aes(x= date, y = forecast), lty = "dotted", col = "#003366", lwd = 1)+
#Lables
ylab("Policy Count")+
xlab("Date")+
ggtitle(paste(PH, "policy history\n\nBlue: New Business | Red: ",
if ( PH == "Myriad") {"Cancelled and Lapsed Policies\n"
} else {
"External section 14s and Surrenders\n"},
"Dotted Line: Forecasted values with 80% and 95% confidence intervals"))+
theme(plot.title = element_text(lineheight=1, face="bold"))
p1
PHG(PH,s,e)
benchmark(PHG(PH,s,e))
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
?qplot
?geom_bar
dataRead <- "//mizazaycensql01/SCMBIR/Client Dashboard/DataIn"
setwd(dataRead)
tl <- list.files(getwd())
tl <- tl[grep("Multiply", tl)]
tl <- tl[order(tl)]
tl <- tl[length(tl)]
M <- read.csv(tl)
M
ggplot(diamonds, aes(color, fill=cut)) + geom_bar() + coord_flip()
ggplot(diamonds, aes(clarity)) + geom_bar() +
facet_wrap(~ cut)
ggplot(diamonds, aes(clarity)) +
geom_freqpoly(aes(group = cut, colour = cut))
qplot(color, data=diamonds, geom="bar")
M
qplot(color, data=diamonds, geom="bar", weight=carat, ylab="carat")
# Another stacked bar chart example
k <- ggplot(mpg, aes(manufacturer, fill=class))
k + geom_bar()
# Use scales to change aesthetics defaults
k + geom_bar() + scale_fill_brewer()
k + geom_bar() + scale_fill_grey()
m <- ggplot(mpg, aes(manufacturer, fill=class))
m + geom_bar()
M
?melk
?melt
melt(M, MultiplyMemberStatusDesc, sum)
require(reshape)
install.packages("reshape")
require(reshape)
melt(M, MultiplyMemberStatusDesc, sum)
melt(M, M$MultiplyMemberStatusDesc, sum)
cast(M, M$MultiplyMemberStatusDesc ~ M$Date, sum, value = M$Count)
cast(data = M, M$MultiplyMemberStatusDesc ~ M$Date, sum, value = M$Count)
cast(data = M, MultiplyMemberStatusDesc ~ Date, sum, value = M$Count)
str(M)
M$Date <- as.Date(M$Date)
M$Date <- as.Date(M$Date, format = "%d-%B-%Y")
str(M)
cast(data = M, MultiplyMemberStatusDesc ~ Date, sum, value = M$Count)
cast(data = M, MultiplyMemberStatusDesc ~ Date, sum, value = Count)
cast(data = M, MultiplyMemberStatusDesc ~ Date, sum, value = 'Count')
cast(data = M, MultiplyMemberStatusDesc ~ Date, sum)
M
M$MultiplyMemberStatusDesc
levels(M$MultiplyMemberStatusDesc)
cast(data = M, MultiplyMemberStatusDesc[2:3] ~ Date, sum)
aggregate(data = M, MultiplyMemberStatusDesc[2:3] ~ Date, sum)
aggregate(data = M, MultiplyMemberStatusDesc ~ Date, sum)
aggregate(data = M, MultiplyMemberStatusDesc ~ Date, FUN = sum)
aggregate(data = M, Date ~ MultiplyMemberStatusDesc , FUN = sum)
aggregate(data = M, Date ~ MultiplyMemberStatusDesc )
aggregate(data = M, Count ~ MultiplyMemberStatusDesc )
aggregate(data = M, Count ~ MultiplyMemberStatusDesc , FUN = sum)
cast(data = M, MultiplyMemberStatusDesc ~ Date, sum)
cast(data = M, MultiplyMemberStatusDesc ~ Date)
cast(data = M, ~ Date)
cast(data = M, MultiplyMemberStatusDesc ~)
cast(data = M, ~ Date, sum)
cast(data = M, MultiplyMemberStatusDesc ~ Date)  / cast(data = M, ~ Date, sum)
cast(data = M, MultiplyMemberStatusDesc ~ Date)
a <- cast(data = M, MultiplyMemberStatusDesc ~ Date)
a
p1a <- qplot(data = M,
x = factor(format(M$Date, format = "%Y-%m")),
y = M$Count,
stat = "identity",
ylim= c(0, NA),
geom = "bar", fill = factor(M$MultiplyMemberStatusDesc),
xlab = "",
ylab = "Member Count",
main = "Multuply Member Count by Status",
position = 'fill',
environment = environment())
p1a <- p1a + theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90))
p1a <- p1a + scale_fill_manual(values = c("#A77A4F", "#FBB040", "#58585B", "#BE2228", "#A7A9AB"))
p1a
dat <- data.frame( fruit=c("Apple", "Apple", "Orange", "Orange", "Orange", "Orange",
"Orange", "Pear", "Pear", "Pear"), variable=c("Present", "Absent",
"Present", "Present", "Present", "Present", "Absent", "Absent",
"Absent", "Present") )
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..count..*100/sum(..count..) ) ) +
opts(title = "Character") +
labs(x = "Fruit", y = "Percentage %") +
scale_fill_manual("Condition", values = alpha( c("firebrick", "dodgerblue4"), 1) )
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..count..*100/sum(..count..) ) )
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..count.. ) )
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..sum(..count..) ) ) +
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..sum(..count..) ) ) +
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..count.. ) )
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..count..*100/sum(..count..) ) )
ggplot(dat, aes(x = fruit, fill = variable) ) +
geom_bar( aes(y = ..count.. ) )
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
shiny::runApp('//Mizazaycensql01/scmbir/Client Dashboard/Shiny')
