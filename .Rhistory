AgeNextBirthday,
a.Gender,
b.ProductHouseDesc
")
demo
PH <- demo[which(demo$ClientRoleDesc == "Policy holder" & demo$AgeNextBirthday >= 20),]
PP <- demo[which(demo$ClientRoleDesc == "Premium Payer" & demo$AgeNextBirthday >= 20),]
demo2 <-rbind(demo[which(demo$ClientRoleDesc == "Life assured" ),], PH, PP)
phm <- demo[which( demo2$ProductHouseDesc == "MYRIAD"),]
phm<-phm[order(phm$AgeNextBirthday,phm$ClientRoleDesc),]
ph <- phm[which(phm$ClientRoleDesc == "Life assured"),]
#qplot(x = hp, y = mpg, data = mtcars, color = cyl, size = mpg, geom="point")
qplot(data = ph, x = AgeNextBirthday, y = count, geom= "bar",stat="identity")+  scale_x_continuous(breaks=(1:10)*10)
qplot(data = ph, x = AgeNextBirthday, y = count, geom= "bar",stat="identity", col = ph$Gender)+  scale_x_continuous(breaks=(1:10)*10)
qplot(data = ph, x = AgeNextBirthday, y = count, geom= "bar",stat="identity", col = ph$Gender, fill = ph$Gender)+  scale_x_continuous(breaks=(1:10)*10)
qplot(data = ph, x = AgeNextBirthday, y = count, geom= "bar",stat="identity", col = ph$ClientRoleDesc, fill = ph$ClientRoleDesc)+  scale_x_continuous(breaks=(1:10)*10)
qplot(data = phm, x = AgeNextBirthday, y = count, geom= "bar",stat="identity", col = ph$ClientRoleDesc, fill = ph$ClientRoleDesc)+  scale_x_continuous(breaks=(1:10)*10)
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
VoC <- sqlQuery(conn2, "
SELECT left(cast([Month]as varchar),4) + '-' + SUBSTRING(cast([Month]as varchar), 5,2) + '-' + right(cast(rtrim([Month])as varchar),2) as Month
,[SurveyDescription]
,[Product]
,[Sentiment]
,[Count]
FROM [Andre].[dbo].[CDVoC]")
PC <- sqlQuery(conn2, "
select
cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2)  +'-01' as date
,c.ProductHouseDesc
,c.PolicyCount
,b.LapsedCancelled
,d.NewPolicies
from
andre.dbo.CDNiF b
inner join andre.dbo.CDPolicyCount c
on b.PeriodicDateKey = c.PeriodicDateKey
and b.ProductHouseDesc = c.ProductHouseDesc
inner join Andre.dbo.CDNewPolicies d
on cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2) +'-01'= d.date
and d.producthousedesc = c.ProductHouseDesc
order by c.PeriodicDateKey
,c.ProductHouseDesc
")
odbcClose(conn2)
conn2 <- odbcConnect("Mizazay")
VoC <- sqlQuery(conn2, "
SELECT left(cast([Month]as varchar),4) + '-' + SUBSTRING(cast([Month]as varchar), 5,2) + '-' + right(cast(rtrim([Month])as varchar),2) as Month
,[SurveyDescription]
,[Product]
,[Sentiment]
,[Count]
FROM [Andre].[dbo].[CDVoC]")
PC <- sqlQuery(conn2, "
select
cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2)  +'-01' as date
,c.ProductHouseDesc
,c.PolicyCount
,b.LapsedCancelled
,d.NewPolicies
from
andre.dbo.CDNiF b
inner join andre.dbo.CDPolicyCount c
on b.PeriodicDateKey = c.PeriodicDateKey
and b.ProductHouseDesc = c.ProductHouseDesc
inner join Andre.dbo.CDNewPolicies d
on cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2) +'-01'= d.date
and d.producthousedesc = c.ProductHouseDesc
order by c.PeriodicDateKey
,c.ProductHouseDesc
")
CoV
VoC
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
conn2 <- odbcConnect("Mizazay")
PC <- sqlQuery(conn2, "
select
cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2)  +'-01' as date
,c.ProductHouseDesc
,c.PolicyCount
,b.LapsedCancelled
,d.NewPolicies
from
andre.dbo.CDNiF b
inner join andre.dbo.CDPolicyCount c
on b.PeriodicDateKey = c.PeriodicDateKey
and b.ProductHouseDesc = c.ProductHouseDesc
inner join Andre.dbo.CDNewPolicies d
on cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2) +'-01'= d.date
and d.producthousedesc = c.ProductHouseDesc
order by c.PeriodicDateKey
,c.ProductHouseDesc
")
PC
str(PC)
PC$date <- as.Date(PC$date, format =%Y-%m-%d")
PC$date <- as.Date(PC$date, format ="%Y-%m-%d")
str(PC)
min(PC$date)
max(PC$date)
dateRangeInput
?dateRangeInput
cd <- as.POSIXlt(format(Sys.Date(), format = "%Y-%m-%d"))
sd <- cd
sd$mon <- sd$mon - 6
sd
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
str(sd)
sd$day <- 1
sd
?POSIXlt
sd$mday <- 1
sd
?dateRangeInput
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
conn2 <- odbcConnect("Mizazay")
VoC <- sqlQuery(conn2, "
SELECT left(cast([Month]as varchar),4) + '-' + SUBSTRING(cast([Month]as varchar), 5,2) + '-' + right(cast(rtrim([Month])as varchar),2) as Month
,[SurveyDescription]
,[Product]
,[Sentiment]
,[Count]
FROM [Andre].[dbo].[CDVoC]")
PC <- sqlQuery(conn2, "
select
cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2)  +'-01' as date
,c.ProductHouseDesc
,c.PolicyCount
,b.LapsedCancelled
,d.NewPolicies
from
andre.dbo.CDNiF b
inner join andre.dbo.CDPolicyCount c
on b.PeriodicDateKey = c.PeriodicDateKey
and b.ProductHouseDesc = c.ProductHouseDesc
inner join Andre.dbo.CDNewPolicies d
on cast(left(c.PeriodicDateKey,4) as varchar) +'-' + substring(cast(c.PeriodicDateKey as varchar),5,2) +'-01'= d.date
and d.producthousedesc = c.ProductHouseDesc
order by c.PeriodicDateKey
,c.ProductHouseDesc
")
odbcClose(conn2)
PC
PC$date
shiny::runApp('Work/ClientDashboard/shiny')
PC
PC$date <- as.Date(PC$date, format = "%Y-%m-%d")
PC
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
PC
Myriad <- PC[which(PC$ProductHouseDesc == "MYRIAD"),]
Myriad
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
shiny::runApp('Work/ClientDashboard/shiny')
NP <- Myriad$NewPolicies
NP
policy <- PC[which(PC$ProductHouseDesc =="MYRIAD"),]
policy
policy$date <- as.Date(policy$date, format = "%Y-%m-%d")
ys <- as.integer(format(policy[order(policy$date),][1,1], format = "%Y"))
ys1 <- as.integer(format(policy1[order(policy1$date),][1,1], format = "%Y"))
ye <- as.integer(format(policy[order(policy$date),][nrow(policy),1], format = "%Y"))
ms <- as.integer(format(policy[order(policy$date),][1,1], format = "%m"))
ms1 <- as.integer(format(policy1[order(policy1$date),][1,1], format = "%m"))
me <- as.integer(format(policy[order(policy$date),][nrow(policy),1], format = "%m"))
min(policy$date)
PC1 <- PC[which(as.Date(PC$date) >= min(policy$date)
PC1 <- PC1[which(as.Date(PC1$date) <= max(policy$date)
PC1 <- PC[which(as.Date(PC$date) >= min(policy$date)
PC1 <- policy[which(as.Date(PC$date) >= min(policy$date),]
policy
PC1 <- policy[which(as.Date(PC$date) >= min(policy$date)),]
PC1 <- PC1[which(as.Date(PC1$date) <= max(policy$date)),]
PC1
policy
policy1 <- policy
ys <- as.integer(format(policy[order(policy$date),][1,1], format = "%Y"))
ys1 <- as.integer(format(policy1[order(policy1$date),][1,1], format = "%Y"))
ye <- as.integer(format(policy[order(policy$date),][nrow(policy),1], format = "%Y"))
ms <- as.integer(format(policy[order(policy$date),][1,1], format = "%m"))
ms1 <- as.integer(format(policy1[order(policy1$date),][1,1], format = "%m"))
me <- as.integer(format(policy[order(policy$date),][nrow(policy),1], format = "%m"))
TSLC <- ts(data = CleanedLapse, start= c(ys,ms), end = c(ye,me), frequency =12)
TSNP <- ts(data = CleanedNewPolicies, start= c(ys,ms), end = c(ye,me), frequency =12)
TSPC <- ts(data = CleanedPolCount, start= c(ys,ms), end = c(ye,me), frequency =12)
TSLC1 <- ts(data = policy1$LapsedCancelled, start= c(ys1,ms1), end = c(ye,me), frequency =12)
TSNP1 <- ts(data = policy1$NewPolicies, start= c(ys1,ms1), end = c(ye,me), frequency =12)
TSPC1 <- ts(data = policy1$PolicyCount, start= c(ys1,ms1), end = c(ye,me), frequency =12)
CleanedLapse <- policy$LapsedCancelled
CleanedNewPolicies <- policy$NewPolicies
CleanedPolCount <- policy$PolicyCount
CleanedPolCount[c(which(CleanedPolCount > quantile(CleanedPolCount, .975)) , which(CleanedPolCount < quantile(CleanedPolCount, .025))  )] <- ave(CleanedPolCount[c(which(CleanedPolCount < quantile(CleanedPolCount, .975)) , which(CleanedPolCount > quantile(CleanedPolCount, .025))  )])[1]
CleanedLapse[c(which(CleanedLapse > quantile(CleanedLapse, .975)) , which(CleanedLapse < quantile(CleanedLapse, .025))  )] <- ave(CleanedLapse[c(which(CleanedLapse < quantile(CleanedLapse, .975)) , which(CleanedLapse > quantile(CleanedLapse, .025))  )])[1]
CleanedNewPolicies[c(which(CleanedNewPolicies > quantile(CleanedNewPolicies, .975)) , which(CleanedNewPolicies < quantile(CleanedNewPolicies, .025))  )] <- ave(CleanedNewPolicies[c(which(CleanedNewPolicies < quantile(CleanedNewPolicies, .975)) , which(CleanedNewPolicies > quantile(CleanedNewPolicies, .025))  )])[1]
TSLC <- ts(data = CleanedLapse, start= c(ys,ms), end = c(ye,me), frequency =12)
TSNP <- ts(data = CleanedNewPolicies, start= c(ys,ms), end = c(ye,me), frequency =12)
TSPC <- ts(data = CleanedPolCount, start= c(ys,ms), end = c(ye,me), frequency =12)
TSLC1 <- ts(data = policy1$LapsedCancelled, start= c(ys1,ms1), end = c(ye,me), frequency =12)
TSNP1 <- ts(data = policy1$NewPolicies, start= c(ys1,ms1), end = c(ye,me), frequency =12)
TSPC1 <- ts(data = policy1$PolicyCount, start= c(ys1,ms1), end = c(ye,me), frequency =12)
TSLC2 <- forecast(auto.arima(TSLC), input$forecastrange, include.constant=FALSE)
TSNP2 <- forecast(auto.arima(TSNP), input$forecastrange, include.constant=FALSE)
TSPC2 <- forecast(auto.arima(TSPC), input$forecastrange, include.constant=FALSE)
TSLC2 <- forecast(auto.arima(TSLC), 12, include.constant=FALSE)
TSNP2 <- forecast(auto.arima(TSNP), 12, include.constant=FALSE)
TSPC2 <- forecast(auto.arima(TSPC), 12, include.constant=FALSE)
LC <- funggcast(TSLC1,TSLC2)
funggcast<-function(dn,fcast){
require(zoo) #needed for the 'as.yearmon()' function
en<-max(time(fcast$mean)) #extract the max date used in the forecast
#Extract Source and Training Data
ds<-as.data.frame(window(dn,end=en, extend = TRUE))
names(ds)<-'observed'
ds$date<-as.Date(time(window(dn,end=en, extend = TRUE)))
#Extract the Fitted Values (need to figure out how to grab confidence intervals)
dfit<-as.data.frame(fcast$fitted)
dfit$date<-as.Date(time(fcast$fitted))
names(dfit)[1]<-'fitted'
ds<-merge(ds,dfit,all.x=T) #Merge fitted values with source and training data
#Exract the Forecast values and confidence intervals
dfcastn<-as.data.frame(fcast)
dfcastn$date<-as.Date(as.yearmon(row.names(dfcastn)))
names(dfcastn)<-c('forecast','lo80','hi80','lo95','hi95','date')
pd<-merge(ds,dfcastn,all.x=T) #final data.frame for use in ggplot
return(pd)
}
LC <- funggcast(TSLC1,TSLC2)
NP <- funggcast(TSNP1,TSNP2)
PCount <- funggcast(TSPC1,TSPC2)
LC
LC
Myriad
TSLC1
TSLC2
Myriad
shiny::runApp('Work/ClientDashboard/shiny')
require(RODBC)
conn <- odbcConnect("Retail")   #opens link to datawarehouse
LCN <- sqlQuery(conn, "
select
'Myriad' as ProductHouse,
left(M.MovementSystemDateKey,6) as Date,
sum(case when m.MovementDesc like '%lapse%'then 1 else 0 end) as LC,
sum(case when m.MovementDesc like '%new business%'then 1 else 0 end) as NB
from
(
select
pol.ProductHouseDesc,
pol.PolicyNo ,
pol.PolicyFull,
apmt.MovementSystemDateKey,
pol.InceptionDate,
apmt.StatusCodeDD,
apmt.MovementKey,
movement.MovementDesc,
apmt.MovementCodeDD,
apmt.PremPaymentFreqKey,
apmt.PolicyKey
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol on pol.PolicyKey= apmt.PolicyKey
inner join momdw1.dim.vwDate genDt on genDt.DateKey =pol.InceptionDate
inner join MOMDW1.dim.Movement movement on apmt.MovementKey = movement.MovementKey
where apmt.MovementCodeDD in ('200','201','202','203', '100')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6)  >201001
and left(apmt.MovementSystemDateKey,6) <cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
) M
group by left(M.MovementSystemDateKey,6)
")
LCN
conn2 <- odbcConnect("MIZAZAY") #opens link to MIZAZAYCENSQL01.momentum.co.za
sqlDrop(conn2,"CDNewCancelledPolicies")
sqlSave(conn2,LCN,"CDNewCancelledPolicies")
sqlDrop(conn2,"CDNewCancelledPolicies")
sqlSave(conn2,LCN,"CDNewCancelledPolicies")
LCN
lll <- LCN
left(LCN$Date,4)
?substring
substring(LCN$Date,1,4)
paste(substring(LCN$Date,1,4), "-", substring(LCN$Date,5,6), "-01")
?paste
paste(substring(LCN$Date,1,4), "-", substring(LCN$Date,5,6), "-01", sep = "")
LCN$Date <- paste(substring(LCN$Date,1,4), "-", substring(LCN$Date,5,6), "-01", sep = "")
as.Date(LCN$Date, format = "%Y-%m-%d")
LCN$Date <- as.Date(LCN$Date, format = "%Y-%m-%d")
str(LCN)
lll <- LCN
str(lll)
qplot(data = lll, aes(x=lll$Date, y = lll$LC))
require(ggplot2)
qplot(data = lll, aes(x=lll$Date, y = lll$LC))
qplot(x=lll$Date, y = lll$LC)
?qplot
qplot(x=lll$Date, y = lll$LC, geom = "line")
qplot(x=lll$Date, y = lll$LC, geom = "line") + geom_line()
qplot(x=lll$Date, y = lll$LC, geom = "line") + geom_line(method= "loess")
qplot(x=lll$Date, y = lll$LC, geom = "line") + geom_line(x=lll$Date, y = lll$LC, method= "loess")
qplot(x=lll$Date, y = lll$LC, geom = "line") + geom_line(x=lll$Date, y = lll$LC, method= "loess")
qplot(x=lll$Date, y = lll$LC) + geom_line(x=lll$Date, y = lll$LC, method= "loess")
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$LC))+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC))
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$LC))+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$LC))+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$LC))+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$LC))+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")
a
lll
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$LC))+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess")
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NP), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB), col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", col = "red", alpha = .25)
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB), col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25)
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB), col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = red)
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB), col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = "red")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = "red")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$L), method = "loess", fill = "red", alpha = .25, col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC, col = "blue"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess", fill = "blue", alpha = .25, col = "blue")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC, col = "blue"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess", fill = "blue", alpha = .25, col = "blue")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), col = "blue"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess", fill = "blue", alpha = .25, col = "blue")
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB, col = "red"), method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), col = "blue", method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess", fill = "blue", alpha = .25, col = "blue")
a
a <- ggplot(data = lll, aes(x = lll$Date, y = lll$NB))+ geom_line(data = lll, aes(x = lll$Date, y = lll$NB), col = "red", method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$NB), method = "loess", fill = "red", alpha = .25, col = "red")+ geom_line(data = lll, aes(x = lll$Date, y = lll$LC), col = "blue", method = "loess")+ stat_smooth(data = lll, aes(x = lll$Date, y = lll$LC), method = "loess", fill = "blue", alpha = .25, col = "blue")
a
require(RODBC)
conn <- odbcConnect("Retail")
NLC <- sqlQuery(conn, "
select
'Myriad' as ProductHouse,
left(cast(M.MovementSystemDateKey as varchar),4) + '-' + substring(cast(M.MovementSystemDateKey as varchar),5,2)   + '-01' Date,
sum(case when m.MovementDesc like '%lapse%'then 1 else 0 end) as LC,
sum(case when m.MovementDesc like '%new business%'then 1 else 0 end) as NB
from
(
select
apmt.MovementSystemDateKey,--
movement.MovementDesc--
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol on pol.PolicyKey= apmt.PolicyKey
inner join momdw1.dim.vwDate genDt on genDt.DateKey =pol.InceptionDate
inner join MOMDW1.dim.Movement movement on apmt.MovementKey = movement.MovementKey
where apmt.MovementCodeDD in ('200','201','202','203', '100')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6)  >201001
and left(apmt.MovementSystemDateKey,6) <cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
) M
group by left(cast(M.MovementSystemDateKey as varchar),4) + '-' + substring(cast(M.MovementSystemDateKey as varchar),5,2)
UNION ALL
select
'Investo' as ProductHouse,
left(cast(M.MovementSystemDateKey as varchar),4) + '-' + substring(cast(M.MovementSystemDateKey as varchar),5,2)   + '-01' Date,
sum(case when m.MovementDesc not like '%new business%'then 1 else 0 end) as LC,
sum(case when m.MovementDesc like '%new business%'then 1 else 0 end) as NB
from
(
select
apmt.MovementSystemDateKey,--
movement.MovementDesc,--
apmt.StatusCodeDD
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol on pol.PolicyKey= apmt.PolicyKey
inner join momdw1.dim.vwDate genDt on genDt.DateKey =pol.InceptionDate
inner join MOMDW1.dim.Movement movement on apmt.MovementKey = movement.MovementKey
where apmt.MovementCodeDD in ('300','575','202','203', '100')
and pol.ProductHouseDesc='Investo'
and left(apmt.MovementSystemDateKey,6)  >201001
and left(apmt.MovementSystemDateKey,6) <cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.SourceTableDD = 'AGRPCONPF'
) M
group by left(cast(M.MovementSystemDateKey as varchar),4) + '-' + substring(cast(M.MovementSystemDateKey as varchar),5,2)
order by date asc")
NLC
Investo <- NLC[which(NLC$ProductHouse == "Investo"),]
Investo
Myriad <- NLC[which(NLC$ProductHouse == "Myriad"),]
as.Date(NLC$Date, format = "%Y-%m-%d")
NLC$Date <- as.Date(NLC$Date, format = "%Y-%m-%d")
Myriad <- NLC[which(NLC$ProductHouse == "Myriad"),]
str(Myriad)
Myriad <- NLC[which(NLC$ProductHouse == "Myriad"),]
Investo <- NLC[which(NLC$ProductHouse == "Investo"),]
require(forecast)
PH <- "Myriad"
Pol <- NLC[which(NLC$ProductHouse == PH),]
Pol
?ts
tsLC <- ts(data = Pol, start = min(Pol$Date), end = max(Pol$Date), frequency = 12)
tsLC
min(Pol$Date)
head(tsLC)
tsLC <- ts(data = Pol$LC, start = min(Pol$Date), end = max(Pol$Date), frequency = 12)
tsLC
?forecast
forecast(auto.arima(tsLC),h= 12)
a <- forecast(auto.arima(tsLC),h= 12)
a <- forecast(auto.arima(tsLC))
a <- forecast(auto.arima(tsLC)
)
a <- forecast(auto.arima(tsLC) ,12 )
a <- forecast(auto.arima(tsLC) ,12 , include.constant=FALSE)
require(forecast)
a <- forecast(auto.arima(tsLC) ,12 , include.constant=FALSE)
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
?selectInput
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
shiny::runApp('//mizazaycensql01/SCMBIR/Client Dashboard/Shiny')
